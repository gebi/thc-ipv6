.\"                                      Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.TH THC-IPV6 8 "Mar 2011"
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
thc-ipv6 \- Tools to play with IPv6
.SH SYNOPSIS
.B any-thc-ipv6-tool [-r] other options ...
.SH OPTIONS
.TP
.B \-r
Send RAW frames to device (no ethernet frames. this is for tunnels.).
.SH DESCRIPTION
This manual page briefly documents the
.B thc-ipv6
toolkit.
.PP
.TP
.B alive6 [-r] <interface> [unicast-or-multicast-address [remote-router]]
Shows alive addresses in the segment. If you specify a remote router, the
packets are sent with a routing header prefixed by fragmentation
.TP
.B denial6 [-r] <interface> <destination> <test-case-number>
Performs various denial of service attacks on a target.
.TP
.B dos-new-ip6 <interface>
This tools prevents new ipv6 interfaces to come up, by sending answers
to duplicate ip6 checks (DAD). This results in a DOS for new ipv6
devices.
.TP
.B detect-new-ip6 <interface> [scriptname]
This tools detects new ipv6 addresses joining the local network.  If
scriptname is supplied, it is executed with the detected IPv6 address as
option
.TP
.B dnsdict6 [-t THREADS] <domain> [dictionary-file]
Enumerates a domain for DNS entries, it uses a dictionary file if supplied
or a built-in list otherwise.
.TP
.B exploit6 [-r] <interface> <destination> [test-case-number]
Performs exploits of various CVE known IPv6 vulnerabilities on the destination
.TP
.B fake_advertise6 <interface> <ip-address> [target-address [own-mac-address]]
Advertise ipv6 address on the network (with own mac if not defined)
sending it to the all-nodes multicast address if no target specified.
.TP
.B fake_mipv6 [-r] <interface> <home-address> <home-agent-address> <care-of-address>
If the mobile IPv6 home-agent is mis-configured to accept MIPV6 updates without
IPSEC, this will redirect all packets for home-address to care-of-address
.TP
.B fake_mld6 [-r] <interface> <multicast-address> [[target-address] [[ttl] [[own-ip] [own-mac-address]]]]
Advertise yourself in a multicast group of your choice.
.TP
.B fake_mld26 [-r] [-l] <interface> <add|delete|query> [multicast-address [target-address [ttl [own-ip [own-mac-address [destination-mac-address]]]]]]
This uses the MLDv2 protocol. Only a subset of what the protocol is able to do is possible to implement via a command line.
.TP
.B fake_mldrouter6 [-r] [-l] <interface> <advertise|solicitate|terminate> [own-ip [own-mac-address]]
Announce, delete or soliciated MLD router - sourself or others.
.TP
.B fake_router6 [-r] <interface> <router-ip-link-local
network-address/prefix-length> <mtu> [mac-address]
Announce yourself as a router and try to become the default router.  If
a non-existing mac-address is supplied, this results in a DOS.
.TP
.B flood_advertise6 [-r] <interface>
Flood the local network with neighbor advertisements.
.TP
.B flood_router6 [-r] <interface>
Flood the local network with router advertisements.
.TP
.B fuzz_ip6 [-r] [-x] [-t number | -T number] [-p number] [-IFSDHRJ] [-1|-2|-3|-4|-5|-6|-7] <interface> <unicast-or-multicast-address> [address-in-data-pkt]
Fuzzes an icmp6 packet
.TP
.B implementation6 [-r] <interface> <destination> [test-case-number]
Performs some ipv6 implementation checks, can be used to test firewalls too.
.TP
.B implementation6d [-r] <interface>
Identifies test packets by the implementation6 tool, useful to check what
packets passed a firewall.
.TP
.B parasite6 <interface> [fake-mac]
This is an "ARP spoofer" for IPv6, redirecting all local traffic to your
own system (or nirvana if fake-mac does not exist) by answering falsely
to Neighbor Solitication requests, specifying FAKE-MAC results in a local DOS
.TP
.B redir6 [-r] <interface> <src-ip> <target-ip> <original-router> <new-router> [new-router-mac]
Implant a route into src-ip, which redirects all traffic to target-ip to
new-ip. You must know the router which would handle the route.
If the new-router-mac does not exist, this results in a DOS.
.TP
.B rsmurf6 [-r] <interface> <victim-ip>
Smurfs the local network of the victim. Note: this depends on an
implementation error, currently only verified on Linux (fixed in current versions).
Evil: "ff02::1" as victim will DOS your local LAN completely
.TP
.B smurf6 [-r] <interface> <victim-ip> [multicast-network-address]
Smurf the target with icmp echo replies. Target of echo request is the
local all-nodes multicast address if not specified
.TP
.B sendpees6 <interface> <key_length> <prefix> <victim-ip>
Send SEND neighbor solicitation messages and make target to verify a lota CGA and RSA signatures.
.TP
.B trace6 [-r] [-d] <interface> targetaddress [port]
A basic but very fast traceroute6 program.
.TP
.B thcping6 <interface> <src6> <dst6> <srcmac> <dstmac> <data>
Craft your special icmpv6 echo request packet.
.TP
.B toobig6 [-r] <interface> <target-ip> <existing-ip> <mtu>
Implants the specified mtu on the target
.TP
.B extract_networks6.sh FILE
prints the networks found in FILE
.TP
.B extract_hosts6.sh FILE
prints the host parts of IPv6 addresses in FILE
.TP
.B fake_dhcps6 interface network-address/prefix-length dns-server [dhcp-server-ip-address [mac-address]]
Fake DHCPv6 server. Use to configure an address and set a DNS server
.TP
.B fake_dns6d interface ipv6-address [fake-ipv6-address [fake-mac]]
Fake DNS server that serves the same ipv6 address to any lookup request
.TP
.B fake_dnsupdate6 dns-server full-qualified-host-dns-name ipv6address
Fake DNS update
.TP
.B flood_dhcpc6 [-n|-N] [-1] [-d] interface [domain-name]
DHCP client flooder. Use to deplete the IP address pool a DHCP6 server is offering.
.TP
.B flood_mld26 [-r] interface
Flood the local network with MLDv2 reports
.TP
.B flood_mld6 [-r] interface
Flood the local network with MLD reports
.TP
.B flood_mldrouter6 [-r] interface
Flood the local network with MLD router advertisements
.TP
.B flood_solicitate6 [-r] interface [target]
Flood the network with neighbor solicitations
.TP
.B fragmentation6 [-fp] [-n number] interface destination [test-case-no]
Performs fragment firewall and implementation checks, incl. denial-of-service.
.TP
.B kill_router6 [-HFD] interface router-address [srcmac [dstmac]]
Announce that a target a router going down to delete it from the routing tables.
.TP
.B ndpexhaust6 interface destination-network [sourceip]
Randomly pings IPs in target network
.TP
.B randicmp6 interface destination [source]
Sends all ICMPv6 type and code combinations to destination
.TP
.B sendpeesmp6 <inferface> <key_length> <prefix> <victim>
Send SEND neighbor solicitation messages and make target to verify a lota CGA and RSA signatures
.SH SEE ALSO
.BR nmap (1),
.BR amap (1),
.BR dsniff (8).
.SH AUTHOR
thc-ipv6 was written by van Hauser <vh@thc.org> / THC
.PP
The homepage for this toolkit is: http://www.thc.org/thc-ipv6
.PP
This manual page was written by Michael Gebetsroither <gebi@grml.org>,
for the Debian project (but may be used by others).
